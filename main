import cv2
import numpy as np
import tflite_runtime.interpreter as tflite
from picamera2 import Picamera2

import time
import neopixel
import board

# Initialize Picamera2
picam2 = Picamera2()
picam2.preview_configuration.main.size = (900, 720)
picam2.preview_configuration.main.format = "BGR888"
picam2.configure("preview")
picam2.start()

#Lights
pixel1= neopixel.NeoPixel(board.D18,60,brightness=1)
pixel1.fill((230,230,250))

# Load TFLite model
interpreter = tflite.Interpreter(model_path="/home/sparsh/Downloads/fer_model_1.tflite")
interpreter.allocate_tensors()

# Get input/output details
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Emotion labels (adjust to match your model's classes)
emotion_labels = ['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']

# Load Haar Cascade for face detection
face_cascade = cv2.CascadeClassifier('/home/sparsh/Desktop/Project/haarcascade_frontalface_default.xml')

while True:
    frame = picam2.capture_array()
    gray = cv2.cvtColor(frame, cv2.COLOR_RGB2GRAY)

    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    for (x, y, w, h) in faces:
        # Preprocess face for model
        roi = gray[y:y+h, x:x+w]
        roi = cv2.resize(roi, (48, 48))
        roi = roi.astype('float32') / 255.0
        roi = np.expand_dims(roi, axis=0)    # batch dimension
        roi = np.expand_dims(roi, axis=-1)   # channel dimension
        

        # Run model
        interpreter.set_tensor(input_details[0]['index'], roi)
        interpreter.invoke()
        pred = interpreter.get_tensor(output_details[0]['index'])
        #emotion = emotion_labels[np.argmax(pred)]
        
        emotion_index=np.argmax(pred)
        emotion = emotion_labels[emotion_index]
        confidence= pred[0][emotion_index]
        print(f"Emotion:{emotion}, Confidence: {confidence:.2f}")
        
        #Lightning
        if (emotion=='Angry'):
                pixel1.fill((220,20,60)) #Crimson
        elif (emotion=='Disgust'):
                pixel1.fill((160,82,45)) #Sienna
        elif (emotion=='Fear'):
                pixel1.fill((25,25,112)) #Midnight Blue
        elif (emotion=='Happy'):
                pixel1.fill((0,128,128)) # Teal
        elif (emotion=='Sad'):
                pixel1.fill((186,85,211)) # Medium Orchid
        elif (emotion=='Neutral'):
                pixel1.fill((0,0,0))        
        elif (emotion=='Surprise'):
                pixel1.fill((0,255,0)) # Lime

        # Draw results
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
        cv2.putText(frame, f"{emotion}", (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

    cv2.imshow('Emotion Recognition', cv2.cvtColor(frame, cv2.COLOR_RGB2BGR))
    if cv2.waitKey(1) & 0xFF == ord('q'):
        pixel1.fill((0,0,0))    
        break

cv2.destroyAllWindows()
